#! /usr/bin/env python3
# -*- mode: python -*-

# dcrunw - Fetch and execute programs from the xchain dogeparty explorer .
# Copyright (C) 2014, 2022 Rhea Myers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or 
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import json, math, sys
import urllib.request

import dogecode.brainfuck, dogecode.network, dogecode.translation


TRANSACTION_URL = "https://dogeparty.xchain.io/api/sends/{}/{}"
HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}


def fetch_code(address):
    """Get the code from the address via the block explorer"""
    code = ""
    page = 1
    tally = 0
    while True:
        url = TRANSACTION_URL.format(address, page)
        req = urllib.request.Request(url, headers=HEADERS)
        with urllib.request.urlopen(req) as response:
            response = json.loads(response.read().decode('utf-8'))
        if "error" in response:
            print("Failed to fetch transactions: {}.".format(response["error"]),
                  file=sys.stderr)
            sys.exit(2)
        sends = response["data"]
        code = dogecode.translation.json_to_code(address, sends, True) + code
        tally += len(sends)
        total = response["total"]
        if tally == total:
            break
        page += 1
    return code

def getopts():
    usage = "usage: %prog [options] program_address"
    parser = OptionParser(usage=usage)
    parser.add_option("-d", "--dump-code",
                      action="store_true", dest="dump", default=False,
                      help="dump the program code to STDERR")
    opts, args = parser.parse_args()
    if(len(args) != 1):
        parser.error("must supply program_address")
    return opts, args

def main():
    (opts, args) = getopts()
    address = args[0]
    #TODO: make sure address is valid
    dump_code = opts.dump
    code = fetch_code(address)
    if dump_code:
        print(code, file=sys.stderr)
    try:
        dogecode.brainfuck.evaluate(code)
    except Exception as e:
        print("Error evaluating program after fetching.", file=sys.stderr)
        print("Program was: {}".format(code), file=sys.stderr)
        print("Exception was: {}".format(e), file=sys.stderr)
        
if __name__ == "__main__":
    main()
